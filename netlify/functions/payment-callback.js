import admin from "firebase-admin";
import crypto from "crypto";

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firebase Admin
if (!admin.apps.length) {
  admin.initializeApp({
    credential: admin.credential.applicationDefault(),
  });
}

const db = admin.firestore();

// üîë –°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á WayForPay
const SECRET_KEY = "4f8e577b3787070fc92079e227d37de997b1dd12";

export async function handler(event, context) {
  if (event.httpMethod !== "POST") {
    return {
      statusCode: 405,
      body: JSON.stringify({ error: "–ú–µ—Ç–æ–¥ –Ω–µ —Ä–∞–∑—Ä–µ—à—ë–Ω" }),
    };
  }

  try {
    const body = JSON.parse(event.body);

    const {
      merchantAccount,
      orderReference,
      amount,
      currency,
      transactionStatus,
      merchantSignature,
      products
    } = body;

    if (!merchantAccount || !orderReference || !amount || !currency || !transactionStatus) {
      return {
        statusCode: 400,
        body: JSON.stringify({ error: "–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã—Ö" }),
      };
    }

    // üîë –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∏
    const signatureString = [
      merchantAccount,
      orderReference,
      amount,
      currency,
      transactionStatus
    ].join(";");

    const expectedSignature = crypto
      .createHmac("sha1", SECRET_KEY)
      .update(signatureString)
      .digest("base64");

    if (merchantSignature !== expectedSignature) {
      return {
        statusCode: 400,
        body: JSON.stringify({ error: "–ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å" }),
      };
    }

    // üÜï –°–æ–∑–¥–∞—ë–º –∑–∞–∫–∞–∑ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "–ù–æ–≤—ã–π"
    const orderData = {
      orderId: orderReference,
      amount,
      currency,
      date: new Date().toISOString(),
      status: "–ù–æ–≤—ã–π",
      paymentMethod: "–ö–∞—Ä—Ç–∞",
      products: products || []
    };

    await db.collection("orders").doc(orderReference).set(orderData);

    return {
      statusCode: 200,
      body: JSON.stringify({ success: true }),
    };
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –≤ payment-callback:", error);
    return {
      statusCode: 500,
      body: JSON.stringify({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" }),
    };
  }
}
